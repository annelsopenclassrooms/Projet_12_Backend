"""Script interactif de cr√©ation manuelle d'un utilisateur via SQLAlchemy."""

import getpass
from sqlalchemy.exc import IntegrityError
from app.config import SessionLocal, engine
from app.models import Base, Users, Roles
from passlib.context import CryptContext

# Contexte pour le hashage bcrypt
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    """Retourne un mot de passe hash√© (bcrypt)."""
    return pwd_context.hash(password)


def ensure_roles(session):
    """Cr√©e les r√¥les de base si besoin."""
    for role_name in ("gestion", "commercial", "support"):
        if not session.query(Roles).filter_by(name=role_name).first():
            session.add(Roles(name=role_name))
    try:
        session.commit()
    except IntegrityError:
        session.rollback()
        print("‚ö†Ô∏è  Les r√¥les existaient d√©j√†.")


def create_user(username: str, email: str, password: str, role_name: str = "gestion"):
    """Cr√©e un utilisateur avec le r√¥le indiqu√©."""
    session = SessionLocal()
    try:
        # V√©rifier que le r√¥le existe
        role = session.query(Roles).filter_by(name=role_name.lower()).first()
        if not role:
            print(f"Le r√¥le '{role_name}' n'existe pas. V√©rifie la liste des r√¥les.")
            return

        # V√©rifier que l'email ou le username n'existe pas d√©j√†
        if session.query(Users).filter_by(email=email).first():
            print(f"‚ùå L'email {email} est d√©j√† utilis√©.")
            return

        if session.query(Users).filter_by(username=username).first():
            print(f"‚ùå Le username {username} est d√©j√† utilis√©.")
            return

        # Cr√©er l'utilisateur
        user = Users(
            username=username,
            first_name=username.capitalize(),
            last_name="User",
            email=email,
            hashed_password=hash_password(password),
            role_id=role.id,
        )
        session.add(user)
        session.commit()
        print(f"‚úÖ Utilisateur '{username}' cr√©√© avec succ√®s (r√¥le: {role_name}).")

    except IntegrityError as e:
        session.rollback()
        print(f"Erreur d'int√©grit√© : {e}")
    finally:
        session.close()


if __name__ == "__main__":
    # 1. Cr√©er les tables si elles n'existent pas
    print("üîß V√©rification de la base de donn√©es...")
    Base.metadata.create_all(bind=engine)

    # 2. V√©rifier / cr√©er les r√¥les
    session = SessionLocal()
    ensure_roles(session)
    session.close()

    # 3. Demander les infos utilisateur
    print("\n=== Cr√©ation d'un nouvel utilisateur ===")
    username = input("Nom d'utilisateur : ").strip()
    email = input("Email : ").strip()
    password = getpass.getpass("Mot de passe : ")
    confirm_password = getpass.getpass("Confirmer le mot de passe : ")

    if password != confirm_password:
        print("‚ùå Les mots de passe ne correspondent pas. Abandon.")
    else:
        role_name = input("R√¥le (gestion/commercial/support) [gestion] : ").strip() or "gestion"
        create_user(username, email, password, role_name)
